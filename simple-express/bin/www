#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');  /** Підключення модуля app, який, ймовірно, містить веб-застосунок, оголошений за допомогою Express. */
var debug = require('debug')('simple-express:server');  /** Використання бібліотеки debug для ведення журналу. Це допомагає відстежувати події в режимі розробки. */
var http = require('http');  /** Підключення модуля http для створення HTTP-сервера. */

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000'); /** Визначення порту, на якому слухатиме сервер. Використовується normalizePort, щоб обробити можливі значення портів. */
app.set('port', port); /**Встановлення порту для веб-застосунку Express. */

/**
 * Create HTTP server.
 */

var server = http.createServer(app); /** Створення HTTP-сервера з веб-застосунком. */

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port); /** Запуск сервера на визначеному порту. */
server.on('error', onError); /** Обробник помилок під час запуску сервера. */
server.on('listening', onListening); /** Обробник події "listening" під час успішного запуску сервера. */

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) { /** Функція для нормалізації значень портів. */
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {  /** Обробник помилок. */
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {  /** Обробник події "listening". */
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
